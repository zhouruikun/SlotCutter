#ifndef __COMM_H
#define __COMM_H
#include "main.h"
#include "FreeRTOS.h"
#include "task.h"
#include "cmsis_os.h"
#include "stm32f1xx_hal.h"
#define INDEX_VALUE 0
#define INDEX_POINT 1
#define INDEX_MAX 2
#define INDEX_MIN 3
#define INDEX_SIZE 4
#define STATUS_LED_IDLE 1
#define STATUS_LED_INIT 2
#define STATUS_LED_MOD_PARA 3
#define STATUS_LED_STANDBY 4

#define STATUS_MOTO_TEST 5
#define STATUS_MOTO_ERR 8
#define STATUS_MOTO_INIT 9
#define STATUS_MOTO_STOP 10
#define STATUS_MOTO_TEST2 11
#define STATUS_MOTO_RUN_MODE1 12
#define STATUS_MOTO_RUN_MODE2 13
#define STATUS_MOTO_RUN_MODE3 14
#define STATUS_MOTO_OUT 15	
#define STATUS_MOTO_RUN_MODE0 16
#define STATUS_FOOTER 17
#define STANDBY_TIME 100

 
typedef struct {
	uint16_t diameter[5];//0
	uint16_t slotNumber[5];//1
	uint16_t micaWidth[5];//2
	uint16_t percentOfPassPreCut[5];//3
	uint16_t motoCompensation[5];//4
	uint16_t millingMethod[5];//5
	uint16_t motoDirection[5];//6
	uint16_t feedOnTime[5];//7
	uint16_t percentOfPassOnCut[5];//8
	uint16_t footerOffTime[5];//09
	uint16_t footerOnTime[5];//a
	uint16_t plusNumberOfMoto[5];//b
	uint16_t mode0DirSwitchTime[5];//c
	uint16_t stepMotoInitSpeed[5];//d
	uint16_t stepMotoRunSpeed[5];	//e
	uint16_t compareThreshold[5];//f
	uint16_t stepMotoFinishTime[5];//g
	uint16_t micaPreTrace[5];//h
  uint16_t footerExitTime[5];//i
}SettingType;
union SettingUnion{
	SettingType SettingStruct;
	uint16_t SettingArray[16][5];
};
 extern uint8_t test_flag, test_plus;;
extern uint8_t ledTaskStatus ,step,slot_count;
extern uint8_t pause_flag;
extern osSemaphoreId Key_KeyTask_BinaryHandle;
extern osSemaphoreId CCD_BinaryHandle;
extern osSemaphoreId Key_Sensor_BinaryHandle;
extern uint8_t moto_msg[2];
extern QueueHandle_t led_key_queue; 
extern QueueHandle_t led_moto_queue; 
extern union SettingUnion Setting ;
//等待外部输入信号  等待成功返回1 等待10ms
extern uint8_t wait_input(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
void runBack(void);
void motoErr(void);
void motoInit(void );
void modeTest(void);
#endif

